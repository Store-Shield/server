private void updateTrackedObjects(List<YoloImageProcessor.Detection> detections, float[][] features, 
                                  int[] assignments, boolean[] matched) {
    List<TrackedObject> trackList = new ArrayList<>(trackedObjects.values());
    
    // 각 매칭에 대해 매칭 품질 기록
    Map<Integer, Float> matchQualities = new HashMap<>();
    
    for (int i = 0; i < assignments.length; i++) {
        int detectionIndex = assignments[i];
        
        if (detectionIndex >= 0) {
            TrackedObject trackedObj = trackList.get(i);
            YoloImageProcessor.Detection detection = detections.get(detectionIndex);
            
            float iou = calculateIoU(trackedObj, detection);
            float featureDist = calculateCosineDistance(trackedObj.getFeatures(), features[detectionIndex]);
            float matchQuality = 0.6f * (1 - iou) + 0.4f * featureDist;
            
            // 매칭 품질 저장
            matchQualities.put(trackedObj.getId(), matchQuality);
            
            if (matchQuality <= 0.6f) { // 더 엄격한 임계값
                // 로그 추가
                Log.d(TAG, "객체 매칭: ID=" + trackedObj.getId() + 
                      ", IoU=" + iou + ", 특징거리=" + featureDist + 
                      ", 품질=" + matchQuality);
                
                kalmanFilter.update(trackedObj, detection);
                updateFeatureVector(trackedObj, features[detectionIndex]);
                trackedObj.update(detection);
                matched[detectionIndex] = true;
            } else {
                // 매칭 품질이 좋지 않으면 매칭하지 않음
                Log.d(TAG, "매칭 거부: ID=" + trackedObj.getId() + 
                      ", 품질이 좋지 않음(" + matchQuality + " > 0.6)");
            }
        }
    }
    
    // 매칭 품질에 따른 중복 객체 검사 및 병합
    detectAndMergeDuplicateTracks(matchQualities);
}

// 중복 객체 감지 및 병합
private void detectAndMergeDuplicateTracks(Map<Integer, Float> matchQualities) {
    List<Integer> idsToRemove = new ArrayList<>();
    
    // 모든 추적 객체 쌍에 대해 검사
    List<TrackedObject> trackList = new ArrayList<>(trackedObjects.values());
    for (int i = 0; i < trackList.size(); i++) {
        TrackedObject track1 = trackList.get(i);
        
        for (int j = i + 1; j < trackList.size(); j++) {
            TrackedObject track2 = trackList.get(j);
            
            // 같은 클래스의 객체만 비교
            if (!track1.getLabel().equals(track2.getLabel())) continue;
            
            // 두 객체 간의 IoU 계산
            float xLeft = Math.max(track1.getLeft(), track2.getLeft());
            float yTop = Math.max(track1.getTop(), track2.getTop());
            float xRight = Math.min(track1.getRight(), track2.getRight());
            float yBottom = Math.min(track1.getBottom(), track2.getBottom());
            
            // 겹치는 영역이 있는지 확인
            if (xRight > xLeft && yBottom > yTop) {
                float intersectionArea = (xRight - xLeft) * (yBottom - yTop);
                float track1Area = (track1.getRight() - track1.getLeft()) * 
                                  (track1.getBottom() - track1.getTop());
                float track2Area = (track2.getRight() - track2.getLeft()) * 
                                  (track2.getBottom() - track2.getTop());
                float iou = intersectionArea / (track1Area + track2Area - intersectionArea);
                
                // 특징 벡터 거리 계산
                float featureDist = calculateCosineDistance(track1.getFeatures(), track2.getFeatures());
                
                // 두 객체가 매우 유사한 경우
                if (iou > 0.5f || featureDist < 0.3f) {
                    // 더 오래된(ID가 작은) 객체를 유지, 새로운 객체 제거
                    int idToKeep = track1.getId() < track2.getId() ? track1.getId() : track2.getId();
                    int idToRemove = track1.getId() < track2.getId() ? track2.getId() : track1.getId();
                    
                    Log.d(TAG, "중복 객체 감지: ID" + idToKeep + "와 ID" + idToRemove + 
                          " (IoU=" + iou + ", 특징거리=" + featureDist + "). ID" + idToRemove + " 제거.");
                    
                    idsToRemove.add(idToRemove);
                }
            }
        }
    }
    
    // 중복 객체 제거
    for (Integer id : idsToRemove) {
        trackedObjects.remove(id);
    }
}


// 비용 행렬 계산 부분을 수정하여 매칭 품질을 더 엄격하게 설정
private float[][] calculateCostMatrix(List<YoloImageProcessor.Detection> detections, float[][] features) {
    int numTracked = trackedObjects.size();
    int numDetected = detections.size();
    float[][] costMatrix = new float[numTracked][numDetected];

    int i = 0;
    for (TrackedObject trackedObj : trackedObjects.values()) {
        for (int j = 0; j < numDetected; j++) {
            YoloImageProcessor.Detection detection = detections.get(j);
            
            // 다른 클래스의 객체는 매우 높은 비용 부여
            if (!trackedObj.getLabel().equals(detection.getLabel())) {
                costMatrix[i][j] = 10.0f; // 매우 높은 비용
                continue;
            }

            // IoU 거리 계산 - IoU가 너무 낮으면 높은 비용
            float iou = calculateIoU(trackedObj, detection);
            if (iou < 0.1f) { // 최소 10% 이상 겹쳐야 함
                costMatrix[i][j] = 5.0f; // 높은 비용
                continue;
            }
            
            float iouDist = 1 - iou;
            float featureDist = calculateCosineDistance(trackedObj.getFeatures(), features[j]);
            
            // 최종 비용 계산 - 가중치 세밀하게 조정
            costMatrix[i][j] = 0.6f * iouDist + 0.4f * featureDist;
        }
        i++;
    }
    
    return costMatrix;
}

// 새 객체 생성 전에 중복 가능성 추가 검사
private void createNewTracks(List<YoloImageProcessor.Detection> detections, float[][] features, boolean[] matched) {
    for (int i = 0; i < detections.size(); i++) {
        if (!matched[i]) {
            YoloImageProcessor.Detection detection = detections.get(i);
            
            // 신뢰도가 충분한 경우만 고려
            if (detection.getConfidence() >= 0.7f) { // 더 높은 신뢰도 임계값
                
                // 기존 객체와 중복 여부 한번 더 확인 (IoU가 높은 객체가 있으면 패스)
                boolean isDuplicate = false;
                for (TrackedObject existingObj : trackedObjects.values()) {
                    if (existingObj.getLabel().equals(detection.getLabel())) {
                        float iou = calculateIoU(existingObj, detection);
                        if (iou > 0.3f) { // 중복 판단 임계값
                            isDuplicate = true;
                            Log.d(TAG, "중복 객체 감지 - 기존 ID: " + existingObj.getId() + 
                                  ", IoU: " + iou + ", 새 객체 생성 취소");
                            break;
                        }
                    }
                }
                
                if (!isDuplicate) {
                    TrackedObject newTrackedObj = new TrackedObject(
                        nextId++,
                        detection.getLabel(),
                        detection.getConfidence(),
                        detection.getLeft(),
                        detection.getTop(),
                        detection.getRight(),
                        detection.getBottom(),
                        features[i]
                    );
                    
                    kalmanFilter.initiate(newTrackedObj);
                    trackedObjects.put(newTrackedObj.getId(), newTrackedObj);
                    Log.d(TAG, "새 객체 생성: ID=" + newTrackedObj.getId() + 
                          ", Label=" + newTrackedObj.getLabel());
                }
            }
        }
    }
}